#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sat Mar  2 11:15:43 2019
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn .circleci/vue-init.sh
match_max 100000
expect -exact "\r
\[32m?\[39m \[1mProject name\[22m\[0m \[0m\[2m(nuxt-ts-project) \[22m\[33D\[33C"
send -- "\r"
expect -exact "\[2K\[G\[32m?\[39m \[1mProject name\[22m\[0m \[0m\[36mnuxt-ts-project\[39m\[30D\[30C\r
\[32m?\[39m \[1mProject description\[22m\[0m \[0m\[2m(Nuxt.js TypeScript project) \[22m\[51D\[51C"
send -- "\r"
expect -exact "\[2K\[G\[32m?\[39m \[1mProject description\[22m\[0m \[0m\[36mNuxt.js TypeScript project\[39m\[48D\[48C\r
\[32m?\[39m \[1mAuthor\[22m\[0m \[0m\[9D\[9C"
send -- "N"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mN\[10D\[10C"
send -- "u"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNu\[11D\[11C"
send -- "x"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNux\[12D\[12C"
send -- "t"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNuxt\[13D\[13C"
send -- " "
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNuxt \[14D\[14C"
send -- "C"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNuxt C\[15D\[15C"
send -- "o"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNuxt Co\[16D\[16C"
send -- "m"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNuxt Com\[17D\[17C"
send -- "m"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNuxt Comm\[18D\[18C"
send -- "u"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNuxt Commu\[19D\[19C"
send -- "n"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNuxt Commun\[20D\[20C"
send -- "i"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNuxt Communi\[21D\[21C"
send -- "t"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNuxt Communit\[22D\[22C"
send -- "y"
expect -exact "\[2K\[G\[32m?\[39m \[1mAuthor\[22m\[0m \[0mNuxt Community\[23D\[23C"
send -- "\r"
expect eof
